-- Register the booster pack
local pack_cards = {
    'j_sp_deckhugger', 'j_sp_landlord', 'j_sp_cowboyfromhell', 'j_sp_woodenruler',
    'j_sp_skyline', 'j_sp_tamerlane', 'j_sp_moodring', 'j_sp_juler', 'j_sp_ragazzo',
    'j_sp_symmetry', 'j_sp_finisher', 'j_sp_sparechange', 'j_sp_sparedollars',
    'j_sp_jackboys', 'j_sp_placeholder', 'j_sp_entanglement', 'j_sp_measurement',
    'j_sp_checkpoint', 'j_sp_alchemist', 'j_sp_topup', 'j_sp_virus', 'j_sp_triangular',
    'j_sp_resonance', 'j_sp_frog', 'j_sp_encore', 'j_sp_scrapheap', 'j_sp_lonewolf',
    'j_sp_coinflip', 'j_sp_blackcat', 'j_sp_luckybreak', 'j_sp_apex', 'j_sp_onetimeuse',
    'j_sp_speedramp', 'j_sp_sacrifice', 'j_sp_sirbaudelaire', 'j_sp_igor', 'j_sp_ritualist',
    'j_sp_straightbroidery', 'j_sp_stonesentinel', 'j_sp_glassglimmer', 'j_sp_steelspark',
    'j_sp_goldenglean', 'j_sp_luckylode', 'j_sp_auraamp', 'j_sp_maximumload'
}

SMODS.Booster{
    key = 'sp_pack1',
    atlas = 'sp_pack1',
    pos = {x = 0, y = 0},
    config = {extra = 3, choose = 1},
    cost = 8,
    weight = 1,
    draw_hand = true,
    loc_txt = {
        name = 'Shuffle Pack',
        text = {'giannis'}
    },
    no_pool_flag = true,

    create_card = function(self, card)
        -- dummy area to avoid crashing due to nil values
        local dummy_area = {
            center = {x = 0, y = 0},
            T = {x = 0, y = 0, w = 1, h = 1},
            cards = {},
            config = {},
            visible = true,
            enabled = true,
        }

        return create_card("Joker", G.pack_cards, nil, nil, true, true, nil, 'sp_pack1')
    end,

    ease_background_colour = function(self)
        ease_colour(G.C.DYN_UI.MAIN, G.C.ORANGE)
        ease_background_colour{new_colour = G.C.ORANGE, special_colour = G.C.BLACK, contrast = 2}
    end,

    use = function(self)
        local _mimic = {}
        
        local available_jokers = {unpack(pack_cards)}

        for i = 1, 3 do
            if #available_jokers > 0 then
                local rand_index = math.random(1, #available_jokers)
                local joker_key = available_jokers[rand_index]
                table.remove(available_jokers, rand_index)

                local card = create_card('Joker', G.pack_cards, nil, nil, true, true, joker_key, 'sp_pack1')
                card.T.x = G.pack_cards.T.x
                card.T.y = G.pack_cards.T.y
                card.sprite_facing = 'back'
                card:set_eternal(true)
                card:set_blueprint(true)
                card.config.atlas = joker_key
                card:start_materialize()
                table.insert(_mimic, card)
            end
        end

        return create_UIBox_cards(_mimic, self)
    end,

    group_key = "k_sp_pack1"
}

SMODS.Joker {
    key = "speedrunner",
    name = "Speedrunner",
    config = { extra = { eeemult = 2 } }, -- start at 2 (tower base)
    rarity = "sp_unfair",
    atlas = "speedrunner",
    pos = { x = 0, y = 0 },
    cost = 55,
    blueprint_compat = true,
    eternal_compat = true,
    perishable_compat = true,
    unlocked = true,
    discovered = false,
    
    loc_txt = {
        ['name'] = 'Speedrunner',
        ['text'] = {
            [1] = '#1#'
        },
        ['unlock'] = {
            [1] = 'Unlocked by default.'
        }
    },

    loc_vars = function(self, info_queue, card)
        return { vars = {
            lenient_bignum(card.ability.extra.eeemult)
        } }
    end,

    calculate = function(self, card, context)
        -- upgrade if hand contains Straight
        if context.cardarea == G.jokers and context.joker_main then
            if next(context.poker_hands["Straight"]) then
                card.ability.extra.eeemult =
                    tetrate(card.ability.extra.eeemult, 12)

                return {
                    message = "Upgrade!",
                    colour = G.C.EDITION
                }
            end
        end

        -- unconditional effect
        if context.cardarea == G.jokers and context.joker_main then
            return {
                mult = tetrate(card.ability.extra.eeemult, 2), -- apply as multiplier
                message = "^^" .. number_format(lenient_bignum(card.ability.extra.eeemult)) .. " Mult",
                colour = G.C.EDITION,
                sound = "talisman_eeemult"
            }
        end
    end
}




ShufflePuffle = {}

-- ensure mod localization file is loaded (no-op if already loaded)
pcall(function() require("localization.en-us") end)

ShufflePuffle.ENABLED_JOKERS = {
    -- Common
    "deckhugger",
    "cowboyfromhell",
    "moodring",
    "juler",
    "sparechange",
    "entanglement",
    "topup",
    "triangular",
    "scrapheap",
    "coinflip",
    "luckybreak",
    -- Uncommon
    "landlord",
    "woodenruler",
    "symmetry",
    "sparedollars",
    "jackboys",
    "measurement",
    "alchemist",
    "resonance",
    "encore",
    "onetimeuse",
    -- Rare
    "skyline",
    "checkpoint",
    "ragazzo",
    "finisher",
    "placeholder",
    "virus",
    "frog",
    "lonewolf",
    "blackcat",
    "apex",
    "speedramp",
    -- Legendary
    "tamerlane"
}

-- Inject global dictionary line (for ^#1# Mult display in Jokers like Tamerlane)
if G and G.localization and G.localization.misc and G.localization.misc.dictionary then
    G.localization.misc.dictionary.a_exp = "^#1# Mult"
end

-- Load globals (if you have shared helper functions here)
assert(SMODS.load_file("globals.lua"))()

-- Load all Joker files in the "jokers" folder
local joker_src = NFS.getDirectoryItems(SMODS.current_mod.path .. "/jokers")
for _, file in ipairs(joker_src) do
    if file:match("%.lua$") then -- Only load .lua files
        assert(SMODS.load_file("jokers/" .. file))()
    end
end

local booster_src = NFS.getDirectoryItems(SMODS.current_mod.path .. "/packs")
for _, file in ipairs(booster_src) do
    if file:match("%.lua$") then -- Only load .lua files
        assert(SMODS.load_file("packs/" .. file))()
    end
end

local rarity_src = NFS.getDirectoryItems(SMODS.current_mod.path .. "/rarities")
for _, file in ipairs(rarity_src) do
    if file:match("%.lua$") then -- Only load .lua files
        assert(SMODS.load_file("rarities/" .. file))()
    end
end

local consumable_src = NFS.getDirectoryItems(SMODS.current_mod.path .. "/consumables")
for _, file in ipairs(consumable_src) do
    if file:match("%.lua$") then -- Only load .lua files
        assert(SMODS.load_file("consumables/" .. file))()
    end
end

local enhancement_src = NFS.getDirectoryItems(SMODS.current_mod.path .. "/enhancements")
for _, file in ipairs(enhancement_src) do
    if file:match("%.lua$") then -- Only load .lua files
        assert(SMODS.load_file("enhancements/" .. file))()
    end
end


-- local rank_src = NFS.getDirectoryItems(SMODS.current_mod.path .. "/ranks")
--for _, file in ipairs(rank_src) do
  --  if file:match("%.lua$") then -- Only load .lua files
    --    assert(SMODS.load_file("ranks/" .. file))()
    --end
--end





local jokers_pool = {
'j_sp_deckhugger', 'j_sp_landlord', 'j_sp_cowboyfromhell', 'j_sp_woodenruler',
'j_sp_skyline', 'j_sp_moodring', 'j_sp_juler', 'j_sp_ragazzo',
'j_sp_symmetry', 'j_sp_finisher', 'j_sp_sparechange', 'j_sp_sparedollars',
'j_sp_jackboys', 'j_sp_placeholder', 'j_sp_entanglement', 'j_sp_measurement',
'j_sp_checkpoint', 'j_sp_alchemist', 'j_sp_topup', 'j_sp_virus', 'j_sp_triangular',
'j_sp_resonance', 'j_sp_frog', 'j_sp_encore', 'j_sp_scrapheap', 'j_sp_lonewolf',
'j_sp_coinflip', 'j_sp_blackcat', 'j_sp_luckybreak', 'j_sp_apex', 'j_sp_onetimeuse',
'j_sp_speedramp', 'j_sp_sacrifice', 'j_sp_sirbaudelaire', 'j_sp_igor', 'j_sp_ritualist',
'j_sp_straightbroidery', 'j_sp_stonesentinel', 'j_sp_glassglimmer', 'j_sp_steelspark',
'j_sp_goldenglean', 'j_sp_luckylode', 'j_sp_auraamp', 'j_sp_maximumload', 'j_sp_lejokerjames', 
'j_sp_nikolajokic','j_sp_handfulfortune', 'j_sp_handfulmultiply', 'j_sp_pacer', 'j_sp_openinggambit',
'j_sp_twosides', 'j_sp_cosmicdust', 'j_sp_quintetreward', 'j_sp_straighttobusiness', 'j_sp_pointguard',
'j_sp_allwild', 'j_sp_numberline', 'j_sp_lukadoncic', 'j_sp_jackfruit', 'j_sp_freddyfazbear', 'j_sp_bonniebunny',
'j_sp_chicachicken', 'j_sp_foxy', 'j_sp_noisyjoker'
    }